#tuple practice
student_tuple = ('Amanda', [98, 85, 87])
first_name, grades = student_tuple
print('first_name:', first_name)
print('grades:', grades)

#creating a primative bar chart
"""Displaying a bar chart"""
numbers = [19, 3, 15, 7, 11]
print('\nCreating a bar chart from numbers:')
print(f'Index{"Value":>8}   Bar')
for index, value in enumerate(numbers):
    print(f'{index:>5}{value:>8}   {"*" * value}')
    
#section 5.3 SC3
single = (123.45)
print('single:', single)

#section 5.5 SC3
numbers = list(range(1, 16))
print(numbers)
numbers[1:len(numbers):2]
print(numbers)
numbers[5:10] = [0] * len(numbers[5:10])
print(numbers)
numbers[5:] = []


#del part of list
numbers = list(range(0, 10))
print(numbers)
del numbers[-1]
print(numbers)

#pass a list through a function
def modify_elements(items):
    """Multiplies all element values in items by 2."""
    for i in range(len(items)):
        items[i] *= 2
numbers = [10, 3, 7, 1, 9]
modify_elements(numbers)
print(numbers)

#sort a list then reverse sort it
numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]
numbers.sort()
print(numbers)
numbers.sort(reverse=True)
print(numbers)

#5.8 SC3
foods = ['Cookies', 'pizza', 'Grapes', 'apples', 'steak', 'Bacon']
foods.sort()
print(foods)

#5.9 Searching Sequences
numbers = [3, 7, 1 , 4, 2, 8, 5, 6]
print(numbers.index(5))

numbers *= 2
print(numbers)
print(numbers.index(5, 7))
print(numbers.index(7, 0, 4))

print(1000 in numbers)
print(5 in numbers)
print(1000 not in numbers)
print(5 not in numbers)

key = 1000
if key in numbers:
    print(f'found {key} at index {numbers.idex(key)}')
else:
    print(f'{key} not found')
